/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { Suspense, useEffect, useMemo, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import type { GLTF } from 'three/examples/jsm/Addons.js';
import type { ThreeElements } from '@react-three/fiber';
import { useGame } from 'ecctrl';

type GLTFResult = GLTF & {
  nodes: {
    morgan_low: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    morgan_mat: THREE.MeshStandardMaterial;
  };
};

export function Character(props: ThreeElements['group']) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials, animations } = useGLTF(
    '/morgan.glb'
  ) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);
  /**
   * animation setup
   */
  const curAnimation = useGame((state) => state.curAnimation);
  const resetAnimation = useGame((state) => state.reset);
  const initializeAnimation = useGame((state) => state.initializeAnimationSet);

  const animationSet = useMemo(() => {
    return {
      idle: 'idle',
      walk: 'walking',
    };
  }, []);

  useEffect(() => {
    initializeAnimation(animationSet);
  }, []);

  useEffect(() => {
    const key = curAnimation ?? animationSet.idle;
    const action = key ? actions[key] : null;

    if (!action) return;
    action.reset().fadeIn(0.2).play();

    action.getMixer().addEventListener('finished', () => resetAnimation());

    //clean up
    return () => {
      //fade out previous action
      action.fadeOut(0.2);

      action.getMixer().removeEventListener('finished', () => resetAnimation());

      //@ts-expect-error mixer
      action._mixer._listeners = [];
    };
  }, [curAnimation]);

  return (
    <Suspense fallback={<capsuleGeometry args={[0.3, 0.7]} />}>
      <group
        ref={group}
        {...props}
        dispose={null}
        name='Armature'
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.01}
        position-y={-0.95}
      >
        <skinnedMesh
          name='morgan_low'
          geometry={nodes.morgan_low.geometry}
          material={materials.morgan_mat}
          skeleton={nodes.morgan_low.skeleton}
          castShadow
        />
        <primitive object={nodes.mixamorigHips} />
      </group>
    </Suspense>
  );
}

useGLTF.preload('/morgan.glb');
